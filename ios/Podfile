# Uncomment this line to define a global platform for your project
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # ‚úÖ Force Firebase SDK version (you can bump this if needed)
  $FirebaseSDKVersion = '11.11.0'

  # ‚úÖ Only include pods you need (Firebase/Core is optional now)
  pod 'Firebase/Auth', $FirebaseSDKVersion
  pod 'Firebase/Firestore', $FirebaseSDKVersion
  pod 'Firebase/Core', $FirebaseSDKVersion # Optional unless explicitly needed

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    # Force minimum iOS deployment target
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
    end

    target.build_configurations.each do |config|
      config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'PrivacyInfo.xcprivacy'
    end

    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
  end

  # ‚úÖ PATCH FIRFirestoreSettings.mm TO FIX BUILD ERROR
  puts "üîß Patching FIRFirestoreSettings.mm..."

  firestore_settings = File.expand_path('Pods/FirebaseFirestore/Firestore/Source/API/FIRFirestoreSettings.mm', __dir__)
  if File.exist?(firestore_settings)
    puts "üîê Updating permissions to allow patching..."
    FileUtils.chmod("+w", firestore_settings)

    text = File.read(firestore_settings)
    new_contents = text.gsub(/ABSL_CONST_INIT /, '')
    File.open(firestore_settings, "w") { |file| file.puts new_contents }

    puts "‚úÖ Patched FIRFirestoreSettings.mm"
  else
    puts "‚ö†Ô∏è Could not find FIRFirestoreSettings.mm"
  end

  # ‚úÖ Ensure Manifest.lock is created to avoid sandbox errors in Xcode
  puts "üìé Ensuring Manifest.lock is in sync..."

  manifest_path = File.join(__dir__, 'Pods', 'Manifest.lock')
  lockfile_path = File.join(__dir__, 'Podfile.lock')

  if File.exist?(lockfile_path)
    FileUtils.cp(lockfile_path, manifest_path)
    puts "‚úÖ Manifest.lock restored from Podfile.lock"
  else
    puts "‚ö†Ô∏è Podfile.lock not found ‚Äì cannot restore Manifest.lock"
  end

end

